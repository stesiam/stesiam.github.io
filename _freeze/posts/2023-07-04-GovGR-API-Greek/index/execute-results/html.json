{
  "hash": "f709f0cd8a2df903d9da1938563da967",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Πρόσβαση στο API του data.gov.gr\"\nauthor: \"stesiam\"\nlang: el\ndescription: \"Ένας απλός οδηγός χρήσης του API του data.gov.gr, ώστε να λαμβάνετε τη ροή δεδομένων με τη χρήση της R.\"\ncategories: [R, API]\nfig-cap-location: bottom\ndate: \"2023-07-04\"\nfreeze: true\nbibliography: [references.bib]\ntoc: true\ntoc-title: Περιεχόμενα\ntoc-location: left\ntitle-block-banner: true\nnocite: '@*'\nlanguage: \n  title-block-author-single: \"Συντάκτης\"\n  title-block-published: \"Δημοσιεύτηκε στις\"\n  appendix-attribution-cite-as: \"Εναλλακτικά, μπορείτε να αναφερθείτε στο παραπάνω άρθρο ως εξής:\"\n  section-title-references: \"Παραπομπή άρθρου\"\n  appendix-attribution-bibtex: \"BibTeX citation:\"\nformat: \n  html:\n    freeze: true\n    code-link: true\n    code-fold: false\n    code-summary: \"Δείξε τον κώδικα\"\n    code-tools: \n      source: https://github.com/stesiam/stesiam.github.io/blob/gh-pages/greek-posts/2023-07-04-GovGR-API-Greek/index.qmd\nexecute:\n  echo: true\neditor_options: \n  markdown: \n    wrap: 80\n---\n\n\n\n\n\n\n## Εισαγωγή\n\nΣτην παραδοσιακή ανάλυση δεδομένων συνήθως ο αναλυτής καλείται να\n\\<<καθαρίσει>\\> τα δεδομένα, να τους δώσει μία κατάλληλη μορφή προκειμένου να\nαναλυθούν. Αυτή η διαδικασία υπονοεί ότι τα δεδομένα υπάρχουν συγκεντρωμένα σε\nένα αρχείο. Ωστόσο, δεν είναι πάντα έτσι. Το πρόβλημα με την ανάλυση ενός\ndataset είναι ότι δεν λαμβάνει υπόψιν τις όποιες νέες τιμές. Σε αυτή τη\nπερίπτωση θα πρέπει να ξανακατεβάσω τα νέα δεδομένα και να ξανατρέξω την ανάλυση\nμέσω της R ή όποιου εργαλείου χρησιμοποιώ. Αυτό όπως γίνεται αντιληπτό είναι μη\nπαραγωγικό, ωστόσο όταν γίνεται λίγες φορές μέσα στο χρόνο, ίσως να μην είναι\nκαι τόσο . Εκεί που πλέον γίνεται εμφανής η μη αποτελεσματικότητα της παραπάνω\nδιαδικασίας είναι όταν υπάρχει συνεχής ροή δεδομένων, άρα πρέπει να γίνεται αυτή\nη διαδικασία καθημερινά. Σε αυτές τις περιπτώσεις φαίνεται η χρησιμότητα του API\nαφού μας δίνει τις νέες τιμές με μικρό σχετικά κόπο. Παράλληλα η χρήση του API\nευνοεί την ένταξη νέων δεδομένων, συνεπώς αν φτιάχνουμε ένα προβλεπτικό μοντέλο η\nακρίβειά του θα παραμένει σε ένα ικανοποιητικό επίπεδο. Τέλος, άλλη μία θετική\nσυμβολή είναι σε Shiny Apps, προκειμένου να αυτοματοποιείται η ανάλυση δεδομένων\nκαι οι πληροφορίες να είναι αξιόπιστες για τον επισκέπτη αυτού.\n\n\nΓενικά υπάρχουν πάρα πολλά API από τα οποία μπορούμε να λάβουμε σημαντικές\nπληροφορίες. Για περισσότερες λεπτομέρειες ως προς τη διαθεσιμότητα δωρεάν APIs\nμπορείτε να δείτε ένα σχετικό [repository με μία λίστα\nαυτών](https://github.com/public-apis/public-apis). Σε αυτό το άρθρο θα\nασχοληθούμε με τα ανοικτά δεδομένα της χώρας μας που διατίθενται μέσω του\n[data.gov.gr](data.gov.gr).\n\n## Αίτηση για API Key\n\nΩστόσο, το συγκεκριμένο API (όπως τα περισσότερα χρειάζονται\n\nΚάνουμε αίτηση στην αντίστοιχη σελίδα και συμπληρώνουμε τα στοιχεία μας και\n**όλα** τα πεδία της φόρμας όπως αυτή φαίνεται παρακάτω:\n\n![Προεπισκόπηση σελίδας αίτησης για πρόσβαση στο\nAPI](images/datagovgr_api_request.png){style=\"text-align:center; background-color: #fafafa; padding: 20px\"\nwidth=\"500\"}\n\nΣτη συνέχεια θα πρέπει να κοιτάξετε το e-mail σας γιατί θα σας έρθει ένα μήνυμα\nμε τον Token μέσω του οποίου θα χρησιμοποιείται το API. Να δείτε οπωσδήποτε και\nτον φάκελο με την Ανεπιθύμητη αλληλογραφία (spam) καθώς εμένα μου ήρθε εκεί.\nΠαρεμπιπτόντως, σε περίπτωση που χάσετε το token και έχετε σβήσει το mail και\nξανακάνετε αίτηση (με το ίδιο mail) θα σας το ξαναστείλει. Το έπαθα μόλις :)\n\n## Χρήση API\n\nΑφού λάβουμε το Token, θα πρέπει με κάποιο τρόπο να λάβουμε τα δεδομένα. Στην συγκεκριμένη πλατφόρμα υπάρχουν δύο τρόποι. \n\n- Χρήση API από την ιστοσελίδα: \n- Χρήση API με την R\n\nΟ ένας τρόπος (και μάλλον ο λιγότερο αποδοτικός) είναι να κάνεις ζητήσεις τα δεδομένα απευθείας από την ιστοσελίδα data.gov.gr. Αυτό είναι από τη μία εξαιρετικά απλό, αλλά από την άλλη κατεβάζουμε μία σταθερή έκδοση των δεδομένων και συνεπώς αν θελήσω να ανανεώσω τα δεδομένα θα πρέπει πάλι να κατεβάσω τα δεδομένα. \n\n\n\n## Παράδειγμα χρήσης\n\nΠριν ολοκληρωθεί αυτό το άρθρο έκρινα ως σημαντική την εφαρμογή ενός\nπαραδείγματος. Τη στιγμή που γράφεται αυτό το άρθρο, υπάρχουν συνολικά 49 βάσεις\nδεδομένων από τις οποίες μπορώ να επιλέξω. Προκειμένου να δούμε την ωφέλεια του\nAPI θα διαλέξω κάποιο που ανανεώνεται σε αρκετά συχνή βάση. Ένα τέτοιο δεδομένο\nείναι οι επιβάτες που [ταξιδεύουν με πλοία](https://www.data.gov.gr/datasets/sailing_traffic/).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr)\nlibrary(jsonlite)\n```\n:::\n\n\n\n\nΣτη συνέχεια θέτω σε μία μεταβλητή τον βασικό σύνδεσμο των δεδομένων. Εγώ που επέλεξα την κίνηση των πλοίων θέτω το εξής:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase = \"https://data.gov.gr/api/v1/query/sailing_traffic\"\n```\n:::\n\n\n\n\nΣτη συνέχεια, όπως τονίζει το documentation της σελίδας για τις άλλες γλώσσες, θα πρέπει να ορίσουμε ένα εύρος ημερομηνιών για το οποίο ενδιαφερόμαστε. Αξίζει να σημειωθεί ότι δεν μπορείτε να πάρετε μεγάλο εύρος με μία μόνο κλήση του API. Για να επιστρέψω στο προηγούμενο παράδειγμα, τα δεδομένα της επιβατικής κίνησης των πλοίων ξεκινάνε από το 2017 μέχρι και σήμερα (2023). Ας υποθέσουμε ότι δεν μας πειράζει αυτό και ότι θέλουμε τα δεδομένα από τις 4 πρώτες μέρες του Ιουλίου του 2023.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndate_from = \"2023-07-01\"\ndate_to = \"2023-07-04\"\n\nAPI_URL = paste0(base, \"?date_from=\", date_from, \"&\", \"date_to=\", date_to)\n\ncall = httr::GET(url = API_URL,\n    add_headers(`Authorization` = paste0('Token token_id')\n    )\n)\n```\n:::\n\n\n\n\n\nΌπου στο σημείο που αναφέρεται το **token_id** θα πρέπει να βάλετε το token που σας έστειλε το data.gov.gr μέσω mail. Αφού λοιπόν αιτηθούμε τα δεδομένα μέσω της GET και κάνουμε λίγο υπομονή βλέπουμε ότι λαμβάνω μία λίστα με διάφορες πληροφορίες. Εμάς μας ενδιαφέρουν τα δεδομένα, οπότε κοιτάμε στη κατηγορία **content** της λίστας, ωστόσο παρατηρούμε μία μη αναγνώσιμη μορφή των στοιχειών μιας και είναι σε δεκαεξαδική μορφή. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata = base::rawToChar(call$content)\n```\n:::\n\n\n\n\nΜε την παραπάνω εντολή μετατρέπονται οι χαρακτήρες και είναι πλέον αναγνώσιμοι, ωστόσο τώρα θα πρέπει να πάρουν και μορφή πίνακα προκειμένου να γίνει η ανάλυση. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata = jsonlite::fromJSON(data, flatten = T)\n```\n:::\n\n\n\n\n\nΚαι τέλος, με τη βοήθεια του πακέτου `jsonlite` λαμβάνω ένα data.frame με όνομα data που περιέχει όλους τους προορισμούς, τον αριθμό επιβατών, αυτοκινήτων για τη κάθε ημέρα που ζήτησα.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}