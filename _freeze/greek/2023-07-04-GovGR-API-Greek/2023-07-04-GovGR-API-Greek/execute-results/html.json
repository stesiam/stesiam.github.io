{
  "hash": "6c77a6d62bffaea73108f03bab5491ad",
  "result": {
    "markdown": "---\ntitle: \"Πρόσβαση στο API του data.gov.gr\"\nauthor: \"stesiam\"\ndescription: \"Ένας απλός οδηγός χρήσης του API του data.gov.gr, ώστε να λαμβάνετε τη ροή δεδομένων με τη χρήση της R.\"\ncategories: [R, API]\nfig-cap-location: bottom\ndate: \"2023-07-04\"\nfreeze: true\nbibliography: [references.bib]\ntoc: true\ntoc-title: Περιεχόμενα\ntoc-location: left\ntitle-block-banner: true\nnocite: '@*'\nformat: \n  html:\n    freeze: true\n    code-link: true\nexecute:\n  echo: true\neditor_options: \n  markdown: \n    wrap: 80\n---\n\n\n\n\n## Εισαγωγή\n\nΣτην παραδοσιακή ανάλυση δεδομένων συνήθως ο αναλυτής καλείται να\n\\<<καθαρίσει>\\> τα δεδομένα, να τους δώσει μία κατάλληλη μορφή πορκειμένου να\nαναλυθούν. Αυτή η δαιδικασία υπονοεί ότι τα δεδομένα υπάρχουν συγκεντρωμένα σε\nένα αρχείο. Ωστόσο, δεν είναι πάντα έτσι. Το πρόβλημα με την ανάλυση ενός\ndataset είναι ότι δεν λαμβάνει υπόψιν τις όποιες νέες τιμές. Σε αυτή τη\nπερίπτωση θα πρέπει να ξανακατβάσω τα νέα δεδομένα και να ξανατρέξω την ανάλυση\nμέσω της R ή όποιου εργαλείου χρησιμοποιώ. Αυτό όπως γίνεται αντιληπτό είναι μη\nπαραγωγικό, ωστόσο όταν γίνεται λίγες φορές μέσα στο χρόνο, ίσως να μην είναι\nκαι τόσο . Εκεί που πλέον γίνεται εμφανής η μη αποτελεσματικότητα της παραπάνω\nδιαδικασίας είναι όταν υπάρχει συνεχής ροή δεδομένων, άρα πρέπει να γίνεται αυτή\nη διαδικασία καθημερινά. Σε αυτές τις περιπτώσεις φαίνεται η χρησιμότητα του API\nαφού μας δίνει τις νέες τιμές με μικρό σχετικά κόπο. Παράλληλα η χρήση του API\nευνοεί την ένατξη νέων δεδομένων, συνεπώς αν φτιάχουμε ένα προβλεπτικό μοντέλο η\nακρίβειά του θα παραμένει σε ένα ικανοποιητικό επίπεδο. Τέλος, άλλη μία θετική\nσυμβολή είναι σε Shiny Apps, προκειμένου να αυτοματοποιείται η ανάλυση δεδομένων\nκαι οι πληροφορίες να είναι αξιόπιστες για τον επισκέπτη αυτού.\n\nΓενικά υπάρχουν πάρα πολλά API από τα οποία μπορούμε να λάβουμε σημαντικές\nπληροφορίες. Για περισσότερες λεπτομέρειες ως προς τη διαθεσιμότητα δωρεάν APIs\nμπορείτε να δείτε ένα σχετικό [repository με μία λίστα\nαυτών](https://github.com/public-apis/public-apis). Σε αυτό το άρθρο θα\nασχοληθούμε με τα ανοικτά δεδομένα της χώρας μας που διατίθενται μέσω του\n[data.gov.gr](data.gov.gr).\n\n## Αίτηση για API Key\n\nΩστόσο, το συγκεκριμένο API (όπως τα περισσότερα χρειάζονται\n\nΚάνουμε άιτηση στην αντίστοιχη σελίδα και συμπληρώνουμε τα στοιχεία μας και\n**όλα** τα πεδία της φόρμας όπως αυτή φαίνεται παρακάτω:\n\n![Προεπισκόπηση σελίδας αίτησης για πρόσβαση στο\nAPI](images/datagovgr_api_request.png){style=\"text-align:center; background-color: #fafafa; padding: 20px\"\nwidth=\"500\"}\n\nΣτη συνέχεια θα πρέπει να κοιτάξετε το e-mail σας γιατί θα σας έρθει ένα μήνυμα\nμε τον Token μέσω του οποίου θα χρησιμοποιείται το API. Να δείτε οπωσδήποτε και\nτον φάκελο με την Ανεπιθύμητη αλληλογραφία (spam) καθώς εμένα μου ήρθε εκεί.\nΠαρεπιπτόντως, σε περίπτωση που χάσετε το token και έχετε σβήσει το mail και\nξανακάνετε αίτηση (με το ίδιο mail) θα σας το ξαναστείλει. Το έπαθα μόλις :)\n\n## Χρήση API\n\nΑφού λάβουμε το Token, θα πρέπει με κάποιο τρόπο να λάβουμε τα δεδομένα. Στην συγκεκριμένη πλατφόρμα υπάρχουν δύο τρόποι. \n\n- Χρήση API από την ιστοσελίδα: \n- Χρήση API με την R\n\nΟ ένας τρόπος (και μάλλον ο λιγότερο αποδοτικός) είναι να κάνεις ζητήσεις τα δεδομένα απευθείας από την ιστοσελίδα data.gov.gr. Αυτό είναι από τη μία εξαιρετικά απλό, αλλά από την άλλη κατεβάζουμε μία σταθερή εκδοση των δεδομένων και συνεπώς αν θελήσω να ανανεώσω τα δεδομένα θα πρέπει πάλι να κατεβάσω τα δεδομένα. \n\n\n\n## Παράδειγμα χρήσης\n\nΠριν ολοκληρωθεί αυτό το άρθρο έκρινα ως σημαντική την εφαρμηγή ενός\nπαραδέιγαμτος. Τη στιγμή που γράφεται αυτό το άρθρο, υπάρχουν συνολικά 49 βάσεις\nδεδομένων από τις οποίες μπορώ να επιλέξω. Προκειμένου να δούμε την ωφέλεια του\nAPI θα διαλέξω κάποιο που ανανεώνεται σε αρκετά συχνή βάση. Ένα τέτοιο δεδομένο\nείναι οι επιβάτες που ταξιδεύουν με πλοία.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr)\nlibrary(jsonlite)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}