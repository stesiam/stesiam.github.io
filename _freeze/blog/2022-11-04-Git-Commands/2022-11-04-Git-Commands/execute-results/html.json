{
  "hash": "dbd31ab281b2617fd5f34ee777be67c6",
  "result": {
    "markdown": "---\ntitle: \"Git Series (Part I - Configuration)\"\nauthor: \"stesiam\"\ndescription: \"An article that brings together some configuration setttings of Git. A beginner's approach to Git.\"\nlink-external-newwindow: true\ncategories: [Git]\nfig-cap-location: bottom\ndate: \"2022-11-04\"\nfreeze: true\nimage: git_new.png\nimage-alt: \"Git commands\" \ntoc: true\ntoc-title: Table of contents\ntoc-location: left\ntitle-block-banner: true\ncitation: true\nnocite: '@*'\ncsl: apa-6th-edition\nbibliography: references.bib\nformat: \n  html:\n    freeze: true\n    code-link: true\n    code-fold: true\nexecute:\n  echo: true\neditor_options: \n  markdown: \n    wrap: 80\n---\n\n\n## Introduction\n\n### What is Version Control System\n\nA Version Control System (VCS) is a way to manage and track code changes. As we build an application, we add functions, change frontend features, fix bugs. We will need to edit the code many times. So we need a way to manage these changes. The tracking of every change to our code is the key point of VCS.\n\n![Workflow without Version Control](workflow_without_vcs.png)\n\n\nSome popular Version Control Software are the following :\n\n* Git\n* Apache Subversion (SVN)\n* Mercurial\n* Bazaar\n\n\n### Popularity of VCS\n\nHaving seen what a VCS is, it would be interesting to see which one is the most widely used. In order to study which VCS is the most popular, I pulled data from [Google Trends](https://trends.google.com/trends/).\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrends_vcs_tidy %>%\n  ggplot(aes(x= Month, y = counts)) +\n  geom_line(aes(color = VCS)) +\n  labs(title = \"Trends on Version Control Systems\",\n              subtitle = \"Compare trends of Git and SVN (Subversion) from 2004 to 2022\",\n              caption = \"Data source: Google Trends\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](2022-11-04-Git-Commands_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nThe figure above makes clear the dominance of Git as a version control tool. Also, we notice that Subversion (SVN) was quite popular and a capable competitor of Git until 2010. After that period there is a continuous decline in SVN's interest and the exact opposite for Git. Today, in 2022, the difference is chaotic between them.\n\n\n### Benefits\n\n> Why should I use VCS ? \n\n- Easy transition between versions\n- More productive, Time saver if a version produces error\n- Enables cooperation with other developers (especially with a hosting service like GitHub).\n\n\n### Drawbacks\n\n> Ok. There are some good points. But where is the catch ?\n\n- We are adding a new tool to our workflow (Git) \n- Kind of steep learning curve.\n\n\n### Hosting platforms\n\nWe have mentioned some of the most important programs for managing the code of an application. Of course, there are not a few times when we want to save the progress of our application somewhere else to enable developers communicate their code commits to each other. The solution is some code hosting services. The best known are **GitHub**, **GitLab** and **Bitbucket**. Finally, in case none of the options outlined earlier satisfy us, there is also the self-host solution. For example, if I had concerns about the terms of the above services, I could host [Gitea](https://gitea.io/en-us/) on my own server or even to rent a cloud server. That way I would have my own \"GitHub\", without depending on a third party service. \n\n## Git settings\n\n### Set up Name & Email\n\nSo, you decided to start Git without setting Name and Email? \n\nYou may think of it again. In case you try to commit without setting a Name and email. Git will not commit your changes, without prior setting those.\n\n```{.bash filename=\"Terminal\"}\ngit config --global user.name \"YourName\"\ngit config --global user.email your_email\n```\n\n:::{.callout-note}\nIf you are planning to host your repository on GitHub, you may want to hide your casual email. In that case GitHub offers a `noreply` email for this purpose. You can read more [here](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-email-preferences/setting-your-commit-email-address).\n:::\n\n\n### Set editor\n\n[Edit...]\n\n```{.bash filename=\"Terminal\"}\ngit config --global core.editor \"editor_name\"\n```\n\n\n| Editor     | Command | \n| :---        |    :----:   |\n| Atom     | Title       |\n| Vim   | Text        |\n\n### Default branch name to main\n\nIn October of 2020, GitHub [announced](https://github.blog/changelog/2020-10-01-the-default-branch-for-newly-created-repositories-is-now-main/) that will change the default name of initial branch from `master` to `main`. <br>\n\n> The default branch name for new repositories is now main. <br>\n      [GitHub.blog - October 1,2020]{style=\"float:right\"}\n\nTherefore, it would be good to make this change in our local environment as well, as follows :\n\n```{.bash filename=\"Terminal\"}\ngit config --global init.defaultBranch main\n```\n\n\n### Merge method\n\nOne change that is not exactly necessary but helps me is to change the defaults regarding merge. Let's say that I want to add a new feature in my application. Most of the times I will make a branch on which I will start developing my new feature. When I implement this function and I'm ready to merge my changes into the main code there are two situations.\n\n**1. There are commits to main branch **\n\nThe predefined action is to merge. The branch is visible. Our setting has not any effect on this case.\n\n**2. There are no commits to main branch**\n\nThe predefined action of Git is to take the feature branch and paste it on the top of main branch. By making the setting above I am telling Git to keep the branch and react like the first case. The branch is visible again.\n\nWith simple words, I am forcing Git to keep branch, regardless of changes to main branch.\n```{.bash filename=\"Terminal\"}\ngit config --global merge.ff false\n```\n\n\n### Auto-sign your commits\n\nIn a previous [article](https://stesiam.github.io/blog/2022-10-03-Verified-Commits/2022-10-03-Verified-Commits.html) we saw how to sign our commits as well as the reasons for doing so. In short, we made a PGP key which we added to our GitHub account. From that moment to sign my commits I had to write `git commit -S -m \"something\"`, instead of `git commit -m \"something\"`. Of course, that method is a little bit problematic. It is a little bit longer, little different in comparison to what I am used to type and most importantly I may forget some times to sign it manually. The last one happened to me A LOT. Thankfully, there is a way to be carefree about that anymore. I can set git config in a way that my commits will be signed automatically.\n\n:::{.callout-warning}\nIf you do not have already a GPG key, you can have a look in this [guide](https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key) in order to generate one. Also, depending your hosting platform for your code, you can link your GPG with your account : <br>\n\n* [GitHub and GPG keys](https://docs.github.com/en/authentication/managing-commit-signature-verification/adding-a-gpg-key-to-your-github-account) <br>\n* [BitBucket and GPG keys](https://confluence.atlassian.com/bitbucketserver/using-gpg-keys-913477014.html) <br>\n* [GitLab and GPG keys](https://docs.gitlab.com/ee/user/project/repository/gpg_signed_commits/)\n:::\n\n```{.bash filename=\"Terminal\"}\ngpg --list-secret-keys --keyid-format LONG\ngit config user.signingkey key_id\ngit config commit.gpgsign true\n```\n\n\n### Check your settings\n\nMaking the above settings, we can have a summary of those with the corresponding command:\n\n```{.bash filename=\"Terminal\"}\ngit config --list\n```\n\nHere is the output on my machine :\n\n\n![Output of git-config command](git_config_output.png)\n\nThe image above sums up the settings of Git. Although, each user has different needs and for that reason it would be good in case you want to learn more about `git config` to see their [documentation page](https://git-scm.com/docs/git-config).\n\n\n\n## To sum up\n\nA summary of the commands we used to configure Git :\n\n```{.bash filename=\"Terminal\"}\ngit config --global user.name \"YourName\"\ngit config --global user.email your_email\ngit config --global core.editor \"editor_name\"\ngit config --global init.defaultBranch main\ngit config --global merge.ff false\n\n# Add PGP key to your commits\n\ngpg --list-secret-keys --keyid-format LONG\ngit config user.signingkey key_id\ngit config commit.gpgsign true\n\n# check git config settings\n\ngit config --list --show-origin\n```\n\nOf course you can access your git config file on your Home directory (at least on Ubuntu installation). \n\n:::{.callout-warning}\nNote that the .gitconfig file, which contains our settings, may not be visible in the Home directory. In general, files whose names begin with a period are not displayed. However, if everything has been done correctly, it's probably there. For example, in Ubuntu you should choose to show hidden files.\n:::\n\nIn case you open that file you will see probably something like the above :\n\n<script src=\"https://gist.github.com/stesiam/c4c1541fd57dad0cafdb3c8be9b95a12.js\"></script>\n\n\n\n## Acknowledgements {.appendix .unlisted}\n\nImage by <a href=\"https://pixabay.com/users/skorec-16694100/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=7522129\">Daniel Skovran</a> from <a href=\"https://pixabay.com//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=7522129\">Pixabay</a>\n",
    "supporting": [
      "2022-11-04-Git-Commands_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}